--- a/doc/proot/man.1
+++ b/doc/proot/man.1
@@ -1,48 +1,19 @@
-.\" Man page generated from reStructuredText.
-.
 .TH PROOT 1 "2014-12-12" "5.1.0" ""
 .SH NAME
-PRoot \- chroot, mount --bind, and binfmt_misc without privilege/setup
-.
-.nr rst2man-indent-level 0
-.
-.de1 rstReportMargin
-\\$1 \\n[an-margin]
-level \\n[rst2man-indent-level]
-level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
--
-\\n[rst2man-indent0]
-\\n[rst2man-indent1]
-\\n[rst2man-indent2]
-..
-.de1 INDENT
-.\" .rstReportMargin pre:
-. RS \\$1
-. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
-. nr rst2man-indent-level +1
-.\" .rstReportMargin post:
-..
-.de UNINDENT
-. RE
-.\" indent \\n[an-margin]
-.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
-.nr rst2man-indent-level -1
-.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
-.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
-..
+PRoot \- chroot, mount \-\-bind, and binfmt_misc without privilege/setup
 .SH SYNOPSIS
 .sp
 \fBproot\fP [\fIoption\fP] ... [\fIcommand\fP]
 .SH DESCRIPTION
 .sp
 PRoot is a user\-space implementation of \fBchroot\fP, \fBmount \-\-bind\fP,
-and \fBbinfmt_misc\fP\&.  This means that users don\(aqt need any privileges
+and \fBbinfmt_misc\fP\&.  This means that users don't need any privileges
 or setup to do things like using an arbitrary directory as the new
 root filesystem, making files accessible somewhere else in the
 filesystem hierarchy, or executing programs built for another CPU
 architecture transparently through QEMU user\-mode.  Also, developers
 can use PRoot as a generic Linux process instrumentation engine thanks
-to its extension mechanism, see \fI\%CARE\fP for an example.  Technically
+to its extension mechanism, see \fICARE\fP for an example.  Technically
 PRoot relies on \fBptrace\fP, an unprivileged system\-call available in
 every Linux kernel.
 .sp
@@ -55,9 +26,9 @@
 .sp
 When the guest Linux distribution is made for a CPU architecture
 incompatible with the host one, PRoot uses the CPU emulator QEMU
-user\-mode to execute transparently guest programs.  It\(aqs a convenient
+user\-mode to execute transparently guest programs.  It's a convenient
 way to develop, to build, and to validate any guest Linux packages
-seamlessly on users\(aq computer, just as if they were in a \fInative\fP
+seamlessly on users' computer, just as if they were in a \fInative\fP
 guest environment.  That way all of the cross\-compilation issues are
 avoided.
 .sp
@@ -75,12 +46,11 @@
 if they were "normal" host programs.
 .SH OPTIONS
 .sp
-The command\-line interface is composed of two parts: first PRoot\(aqs
+The command\-line interface is composed of two parts: first PRoot's
 options (optional), then the command to launch (\fB/bin/sh\fP if not
 specified).  This section describes the options supported by PRoot,
 that is, the first part of its command\-line interface.
 .SS Regular options
-.INDENT 0.0
 .TP
 .BI \-r \ path\fP,\fB \ \-\-rootfs\fB= path
 Use \fIpath\fP as the new guest root file\-system, default is \fB/\fP\&.
@@ -104,7 +74,7 @@
 guest location is a symbolic link, it is dereferenced to ensure
 the new content is accessible through all the symbolic links that
 point to the overlaid content.  In most cases this default
-behavior shouldn\(aqt be a problem, although it is possible to
+behavior shouldn't be a problem, although it is possible to
 explicitly not dereference the guest location by appending it the
 \fB!\fP character: \fB\-b *host_path*:*guest_location!*\fP\&.
 .TP
@@ -137,14 +107,12 @@
 .TP
 .B \-h\fP,\fB  \-\-help\fP,\fB  \-\-usage
 Print the version and the command\-line usage, then exit.
-.UNINDENT
 .SS Extension options
 .sp
 The following options enable built\-in extensions.  Technically
 developers can add their own features to PRoot or use it as a Linux
 process instrumentation engine thanks to its extension mechanism, see
 the sources for further details.
-.INDENT 0.0
 .TP
 .BI \-k \ string\fP,\fB \ \-\-kernel\-release\fB= string
 Make current kernel appear as kernel release \fIstring\fP\&.
@@ -174,11 +142,9 @@
 \fIgid\fP\&.  Likewise, files actually owned by the current user and
 group appear as if they were owned by \fIuid\fP and \fIgid\fP instead.
 Note that the \fB\-0\fP option is the same as \fB\-i 0:0\fP\&.
-.UNINDENT
 .SS Alias options
 .sp
 The following options are aliases for handy sets of options.
-.INDENT 0.0
 .TP
 .BI \-R \ path
 Alias: \fB\-r *path*\fP + a couple of recommended \fB\-b\fP\&.
@@ -187,10 +153,9 @@
 access information about the host system, as it is illustrated in
 the \fBExamples\fP section of the manual.  These host information
 are typically: user/group definition, network setup, run\-time
-information, users\(aq files, ...  On all Linux distributions, they
+information, users' files, ...  On all Linux distributions, they
 all lie in a couple of host files and directories that are
 automatically bound by this option:
-.INDENT 7.0
 .IP \(bu 2
 /etc/host.conf
 .IP \(bu 2
@@ -229,7 +194,6 @@
 $HOME
 .IP \(bu 2
 \fIpath\fP
-.UNINDENT
 .TP
 .BI \-S \ path
 Alias: \fB\-0 \-r *path*\fP + a couple of recommended \fB\-b\fP\&.
@@ -238,7 +202,6 @@
 the guest rootfs.  It is similar to the \fB\-R\fP option expect it
 enables the \fB\-0\fP option and binds only the following minimal set
 of paths to avoid unexpected changes on host files:
-.INDENT 7.0
 .IP \(bu 2
 /etc/host.conf
 .IP \(bu 2
@@ -261,8 +224,6 @@
 $HOME
 .IP \(bu 2
 \fIpath\fP
-.UNINDENT
-.UNINDENT
 .SH EXIT STATUS
 .sp
 If an internal error occurs, \fBproot\fP returns a non\-zero exit status,
@@ -285,8 +246,6 @@
 \fBproot\fP the path to the guest rootfs followed by the desired
 command.  The example below executes the program \fBcat\fP to print the
 content of a file:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -295,14 +254,10 @@
 Welcome to Slackware Linux 8.0
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 The default command is \fB/bin/sh\fP when none is specified. Thus the
 shortest way to confine an interactive shell and all its sub\-programs
 is:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -312,15 +267,11 @@
 Welcome to Slackware Linux 8.0
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .SS \fBmount \-\-bind\fP equivalent
 .sp
 The bind mechanism enables one to relocate files and directories.  This is
 typically useful to trick programs that perform access to hard\-coded
 locations, like some installation scripts:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -333,14 +284,10 @@
 [...] # prog is installed in "/tmp/alternate_opt/bin" actually
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 As shown in this example, it is possible to bind over files not even
 owned by the user.  This can be used to \fIoverlay\fP system configuration
 files, for instance the DNS setting:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -348,25 +295,19 @@
 \-rw\-r\-\-r\-\- 1 root root 675 Mar  4  2011 /etc/hosts
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
 proot \-b ~/alternate_hosts:/etc/hosts
 
-$ echo \(aq1.2.3.4 google.com\(aq > /etc/hosts
+$ echo '1.2.3.4 google.com' > /etc/hosts
 $ resolveip google.com
 IP address of google.com is 1.2.3.4
-$ echo \(aq5.6.7.8 google.com\(aq > /etc/hosts
+$ echo '5.6.7.8 google.com' > /etc/hosts
 $ resolveip google.com
 IP address of google.com is 5.6.7.8
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 Another example: on most Linux distributions \fB/bin/sh\fP is a symbolic
 link to \fB/bin/bash\fP, whereas it points to \fB/bin/dash\fP on Debian
@@ -374,21 +315,15 @@
 might not work with Dash.  In this case, the binding mechanism of
 PRoot can be used to set non\-disruptively \fB/bin/bash\fP as the default
 \fB/bin/sh\fP on these two Linux distributions:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
 proot \-b /bin/bash:/bin/sh [...]
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 Because \fB/bin/sh\fP is initially a symbolic link to \fB/bin/dash\fP, the
 content of \fB/bin/bash\fP is actually bound over this latter:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -402,18 +337,14 @@
 089ed56cd74e63f461bef0fdfc2d159a  /bin/dash
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
-In most cases this shouldn\(aqt be a problem, but it is still possible to
+In most cases this shouldn't be a problem, but it is still possible to
 strictly bind \fB/bin/bash\fP over \fB/bin/sh\fP \-\- without dereferencing
 it \-\- by specifying the \fB!\fP character at the end:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
-proot \-b \(aq/bin/bash:/bin/sh!\(aq
+proot \-b '/bin/bash:/bin/sh!'
 
 $ md5sum /bin/sh
 089ed56cd74e63f461bef0fdfc2d159a  /bin/sh
@@ -423,16 +354,12 @@
 c229085928dc19e8d9bd29fe88268504  /bin/dash
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .SS \fBchroot\fP + \fBmount \-\-bind\fP equivalent
 .sp
 The two features above can be combined to make any file from the host
 rootfs accessible in the confined environment just as if it were
 initially part of the guest rootfs.  It is sometimes required to run
 programs that rely on some specific files:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -442,12 +369,8 @@
 Error, do this: mount \-t proc none /proc
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 works better with:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -461,14 +384,10 @@
 ?        ps \-o tty,command
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
-Actually there\(aqs a bunch of such specific files, that\(aqs why PRoot
+Actually there's a bunch of such specific files, that's why PRoot
 provides the option \fB\-R\fP to bind automatically a pre\-defined list of
 recommended paths:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -482,16 +401,12 @@
 pts/6    ps \-o tty,command
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .SS \fBchroot\fP + \fBmount \-\-bind\fP + \fBsu\fP equivalent
 .sp
 Some programs will not work correctly if they are not run by the
 "root" user, this is typically the case with package managers.  PRoot
 can fake the root identity and its privileges when the \fB\-0\fP (zero)
 option is specified:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -502,13 +417,11 @@
 
 # mkdir /tmp/foo
 # chmod a\-rwx /tmp/foo
-# echo \(aqI bypass file\-system permissions.\(aq > /tmp/foo/bar
+# echo 'I bypass file\-system permissions.' > /tmp/foo/bar
 # cat /tmp/foo/bar
 I bypass file\-system permissions.
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 This option is typically required to create or install packages into
 the guest rootfs.  Note it is \fInot\fP recommended to use the \fB\-R\fP
@@ -516,8 +429,6 @@
 system files, like \fB/etc/group\fP\&.  Instead, it is recommended to use
 the \fB\-S\fP option.  This latter enables the \fB\-0\fP option and binds
 only paths that are known to not be updated by packages:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -527,18 +438,14 @@
 Installing package perl...
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .SS \fBchroot\fP + \fBmount \-\-bind\fP + \fBbinfmt_misc\fP equivalent
 .sp
 PRoot uses QEMU user\-mode to execute programs built for a CPU
-architecture incompatible with the host one.  From users\(aq
+architecture incompatible with the host one.  From users'
 point\-of\-view, guest programs handled by QEMU user\-mode are executed
 transparently, that is, just like host programs.  To enable this
 feature users just have to specify which instance of QEMU user\-mode
 they want to use with the option \fB\-q\fP:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -548,31 +455,23 @@
 Welcome to ARMedSlack Linux 12.2
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 The parameter of the \fB\-q\fP option is actually a whole QEMU user\-mode
 command, for instance to enable its GDB server on port 1234:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
 proot \-R /mnt/armslack\-12.2/ \-q "qemu\-arm \-g 1234" emacs
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 PRoot allows one to mix transparently the emulated execution of guest
 programs and the native execution of host programs in the same
-file\-system namespace.  It\(aqs typically useful to extend the list of
+file\-system namespace.  It's typically useful to extend the list of
 available programs and to speed up build\-time significantly.  This
 mixed\-execution feature is enabled by default when using QEMU
 user\-mode, and the content of the host rootfs is made accessible
 through \fB/host\-rootfs\fP:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -580,24 +479,20 @@
 
 $ file /bin/echo
 [...] ELF 32\-bit LSB executable, ARM [...]
-$ /bin/echo \(aqHello world!\(aq
+$ /bin/echo 'Hello world!'
 Hello world!
 
 $ file /host\-rootfs/bin/echo
 [...] ELF 64\-bit LSB executable, x86\-64 [...]
-$ /host\-rootfs/bin/echo \(aqHello mixed world!\(aq
+$ /host\-rootfs/bin/echo 'Hello mixed world!'
 Hello mixed world!
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 Since both host and guest programs use the guest rootfs as \fB/\fP,
 users may want to deactivate explicitly cross\-filesystem support found
 in most GNU cross\-compilation tools.  For example with GCC configured
 to cross\-compile to the ARM target:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -608,14 +503,10 @@
 $ ./configure; make
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
 As with regular files, a host instance of a program can be bound over
 its guest instance.  Here is an example where the guest binary of
 \fBmake\fP is overlaid by the host one:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -628,31 +519,24 @@
 Built for x86_64\-slackware\-linux\-gnu
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .sp
-It\(aqs worth mentioning that even when mixing the native execution of
+It's worth mentioning that even when mixing the native execution of
 host programs and the emulated execution of guest programs, they still
 believe they are running in a native guest environment.  As a
 demonstration, here is a partial output of a typical \fB\&./configure\fP
 script:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
 checking whether the C compiler is a cross\-compiler... no
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .SH DOWNLOADS
 .SS PRoot
 .sp
 The latest release of PRoot is packaged on \fI\%http://packages.proot.me\fP
 and sources are hosted on \fI\%http://github.proot.me\fP\&.  It is also
 available as highly compatible static binaries:
-.INDENT 0.0
 .IP \(bu 2
 for x86_64: \fI\%http://static.proot.me/proot\-x86_64\fP
 .IP \(bu 2
@@ -661,14 +545,12 @@
 for ARM: \fI\%http://static.proot.me/proot\-arm\fP
 .IP \(bu 2
 other architectures: on demand.
-.UNINDENT
 .SS Rootfs
 .sp
 Here follows a couple of URLs where some rootfs archives can be freely
 downloaded.  Note that \fBmknod\fP errors reported by \fBtar\fP when
 extracting these archives can be safely ignored since special files
 are typically bound (see \fB\-R\fP option for details).
-.INDENT 0.0
 .IP \(bu 2
 \fI\%http://download.openvz.org/template/precreated/\fP
 .IP \(bu 2
@@ -679,20 +561,15 @@
 \fI\%http://cdimage.ubuntu.com/ubuntu\-core/releases/\fP
 .IP \(bu 2
 \fI\%http://archlinuxarm.org/developers/downloads\fP
-.UNINDENT
 .sp
 Technically such rootfs archive can be created by running the
 following command on the expected Linux distribution:
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
 tar \-\-one\-file\-system \-\-create \-\-gzip \-\-file my_rootfs.tar.gz /
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
 .SS QEMU user\-mode
 .sp
 QEMU user\-mode is required only if the guest rootfs was made for a CPU
@@ -710,8 +587,6 @@
 .sp
 Visit \fI\%http://proot.me\fP for help, bug reports, suggestions, patches, ...
 Copyright (C) 2014 STMicroelectronics, licensed under GPL v2 or later.
-.INDENT 0.0
-.INDENT 3.5
 .sp
 .nf
 .ft C
@@ -721,7 +596,4 @@
 |__|  |__|__\e_____/\e_____/\e____|
 .ft P
 .fi
-.UNINDENT
-.UNINDENT
-.\" Generated by docutils manpage writer.
 .
