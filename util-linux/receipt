# SliTaz package receipt v2.

PACKAGE="util-linux"
VERSION="2.30.0"
CATEGORY="meta"
SHORT_DESC="Random collection of Linux utilities"
MAINTAINER="pankso@slitaz.org"
LICENSE="GPL2 LGPL2.1 BSD PublicDomain"
WEB_SITE="https://en.wikipedia.org/wiki/Util-linux"
HOST_ARCH="i486 arm"

TARBALL="$PACKAGE-${VERSION%.0}.tar.xz"
WGET_URL="https://www.kernel.org/pub/linux/utils/util-linux/v${VERSION%.*}/$TARBALL"

BUILD_DEPENDS="libcap-dev readline-dev python-dev glib gtk-doc \
libxslt gettext ncurses-dev zlib-dev"
COOKOPTS="!menus"
SPLIT="util-linux-bash-completion util-linux-blkid util-linux-blkid-dev \
util-linux-blockdev util-linux-cfdisk util-linux-column util-linux-cramfs \
util-linux-eject util-linux-fdisk util-linux-fdisk-dev util-linux-flock \
util-linux-getopt util-linux-manpages util-linux-minix util-linux-mkfs \
util-linux-mount util-linux-mount-dev util-linux-partx util-linux-setterm \
util-linux-sfdisk util-linux-smartcols util-linux-smartcols-dev \
util-linux-uuid util-linux-uuid-dev util-linux-whereis util-linux-misc"

# Rules to configure and make the package.
compile_rules()
{
	# Fix undeclared 'LINE_MAX'
	case "$ARCH" in
		arm) sed -i s'|LINE_MAX|25|' text-utils/*.c ;;
	esac

	mkdir -p $install/var/lib/hwclock
	./configure \
		ADJTIME_PATH=/var/lib/hwclock/adjtime \
		--docdir=/usr/share/doc/util-linux-$VERSION \
		--disable-static \
		--without-systemd \
		--without-systemdsystemunitdir &&
	make && make install || exit 1

	mkdir -p $install/usr/share/applications
	cp $stuff/cfdisk.desktop $install/usr/share/applications
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	case ${PACKAGE#util-linux-} in
		bash-completion)
			copy bash-completion/
			CAT="shells|BASH completions"
			DEPENDS="bash"
			;;
		blkid)
			copy lsblk blkid libblkid.so*
			CAT="base-system|blkid utility"
			DEPENDS="glibc-base util-linux-mount util-linux-smartcols \
			util-linux-uuid"
			;;
		blkid-dev)
			copy blkid.h blkid.pc libblkid.*a
			CAT="development|blkid development files"
			DEPENDS="util-linux-blkid util-linux-uuid-dev"
			;;
		blockdev)
			copy blockdev
			CAT="base-system|blockdev utility"
			DEPENDS="glibc-base"
			;;
		cfdisk)
			copy cfdisk cfdisk.desktop
			CAT="system-tools|cfdisk utility"
			DEPENDS="glibc-base ncurses util-linux-blkid util-linux-fdisk \
			util-linux-mount util-linux-smartcols util-linux-uuid"
			;;
		column)
			copy column col colrm colcrt
			CAT="base-system|column utility"
			DEPENDS="glibc-base"
			;;
		cramfs)
			copy *.cramfs
			CAT="system-tools|cramfs utilities"
			DEPENDS="glibc-base zlib"
			;;
		eject)
			copy eject
			CAT="base-system|eject utility"
			DEPENDS="glibc-base util-linux-blkid util-linux-mount \
			util-linux-uuid"
			;;
		fdisk)
			copy fdisk libfdisk.so*
			CAT="system-tools|fdisk utility"
			DEPENDS="glibc-base ncurses readline util-linux-blkid \
			util-linux-smartcols util-linux-uuid"
			;;
		fdisk-dev)
			copy libfdisk.h libfdisk.*a fdisk.pc
			CAT="development|fdisk utility development files"
			DEPENDS="util-linux-fdisk util-linux-blkid-dev util-linux-uuid-dev"
			;;
		flock)
			copy flock lslocks
			CAT="base-system|flock utility"
			DEPENDS="glibc-base"
			;;
		getopt)
			copy getopt
			CAT="base-system|getopt utility"
			DEPENDS="glibc-base"
			;;
		manpages)
			copy man/
			CAT="doc|manual pages"
			DEPENDS=" "
			;;
		minix)
			copy *.minix
			CAT="system-tools|minix utilities"
			DEPENDS="glibc-base"
			;;
		mkfs)
			copy mk*
			rm -r $fs/usr
			CAT="base-system|mkfs utilities"
			DEPENDS="glibc-base util-linux-blkid util-linux-uuid zlib"
			;;
		mount)
			copy findmnt mount libmount.so* mountpoint umount
			CAT="base-system|mount utilities"
			DEPENDS="glibc-base util-linux-blkid util-linux-uuid \
			util-linux-smartcols"
			;;
		mount-dev)
			copy libmount.h libmount.*a mount.pc
			CAT="development|mount utilities development files"
			DEPENDS="util-linux-mount util-linux-blkid-dev util-linux-uuid-dev"
			;;
		partx)
			copy addpart delpart partx resizepart
			CAT="system-tools|partx utilities"
			DEPENDS="glibc-base util-linux-blkid util-linux-uuid \
			util-linux-smartcols"
			;;
		setterm)
			copy setterm
			CAT="base-system|setterm utility"
			DEPENDS="glibc-base ncurses"
			;;
		sfdisk)
			copy sfdisk
			CAT="system-tools|sfdisk utility"
			DEPENDS="glibc-base ncurses readline util-linux-blkid \
			util-linux-fdisk util-linux-smartcols util-linux-uuid"
			;;
		smartcols)
			copy libsmartcols.so*
			CAT="system-tools|smartcols library"
			DEPENDS="glibc-base"
			;;
		smartcols-dev)
			copy libsmartcols.h libsmartcols.*a smartcols.pc
			CAT="development|smartcols library development files"
			DEPENDS="util-linux-smartcols"
			;;
		uuid)
			copy libuuid.so* uuidgen uuidd
			CAT="base-system|uuid utility and library"
			DEPENDS="glibc-base"
			;;
		uuid-dev)
			copy uuid.h libuuid.*a uuid.pc
			CAT="development|uuid utility and library development files"
			DEPENDS="util-linux-uuid"
			;;
		whereis)
			copy whereis
			CAT="base-system|whereis utility"
			DEPENDS="glibc-base"
			;;
		misc)
			copy @std @dev
			remove_already_packed
			CAT="system-tools|misc utilities"
			;;
	esac

	if [ "$PACKAGE" != 'util-linux-bash-completion' -a -d "$fs/usr/share/bash-completion" ]; then
		rm -r $fs/usr/share/bash-completion
		rmdir --parents --ignore-fail-on-non-empty $fs/usr/share
	fi
}
