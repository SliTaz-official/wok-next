# SliTaz package receipt v2.

PACKAGE="glib"
VERSION="2.50.3"
CATEGORY="x-window"
SHORT_DESC="C routines"
MAINTAINER="pankso@slitaz.org"
LICENSE="GPL2"
WEB_SITE="http://www.gtk.org/"
HOST_ARCH="i486 arm"

TARBALL="$PACKAGE-$VERSION.tar.xz"
WGET_URL="$GNOME_MIRROR/$PACKAGE/${VERSION%.*}/$TARBALL"

BUILD_DEPENDS="perl indent python zlib-dev libffi-dev gettext-tools elfutils-dev \
pcre-dev gtk-doc libxslt libxml2-tools dbus-dev util-linux-mount-dev"
BUILD_DEPENDS_arm="pcre-dev libffi-dev zlib-dev elfutils-dev libxml2-dev"
SPLIT="libgio libgio-dev glib-dev"

# Rules to configure and make the package.
compile_rules()
{
	case "$ARCH" in
		i?86)
			./configure \
				--sysconfdir=/etc \
				--with-pcre=system \
				$CONFIGURE_ARGS ;;
		arm*)
			# Native ARM build --> if ARCH != SLITAZ_ARCH ?
			export LD_LIBRARY_PATH=/cross/$ARCH/sysroot/usr/lib:/usr/lib:/lib
			export PKG_CONFIG_PATH=/cross/$ARCH/sysroot/usr/lib/pkgconfig
			export LDFLAGS="$LDFLAGS -L/cross/$ARCH/sysroot/usr/lib -Wl,-rpath=/cross/$ARCH/sysroot/usr/lib"
			
			# Glib
			export glib_cv_stack_grows=${glib_cv_stack_grows=no}
			export glib_cv_uscore=${glib_cv_uscore=no}
			export ac_cv_func_posix_getpwuid_r=${ac_cv_func_posix_getpwuid_r=no}
			export ac_cv_func_posix_getgrgid_r=${ac_cv_func_posix_getgrgid_r=no}
			export ac_cv_type_long_long=${ac_cv_type_long_long=yes}
			CC="$HOST_SYSTEM-gcc" \
			LIBTOOL="$HOST_SYSTEM-libtool" \
			./configure \
				--sysconfdir=/etc \
				--with-pcre=system \
				--build=i486-slitaz-linux \
				--host=$ARCH-slitaz-linux-gnueabi \
				--enable-shared=yes \
				--enable-static=yes \
				--disable-rpath ;;
	esac &&
	make &&
	make install
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	case $PACKAGE in
		glib)
			copy bin/ *.so*
			# Split gio --> libgio
			rm $fs/usr/lib/libgio*
			# Python codegen, tester, Perl mkenums --> glib-dev
			cd $fs/usr/bin; rm gdbus-codegen gtester* glib-mkenums
			DEPENDS="pcre libffi libxml2 elfutils"
			;;
		libgio)
			copy libgio*.so*
			CAT="libs|libgio shared library"
			;;
		libgio-dev)
			copy gio/ libgio*.*a gio*.pc
			rm -rf $fs/usr/share
			CAT="development|libgio development files"
			DEPENDS="libgio"
			;;
		glib-dev)
			# Python codegen, tester, compile, Perl mkenums
			copy @dev gdbus-codegen gtester* glib-mkenums
			# Remove libgio-dev
			rm -rf $fs/usr/lib/libgio*.*a
			rm -rf $fs/usr/include/gio-unix-2.0
			rm $fs/usr/lib/pkgconfig/gio*.pc
			DEPENDS="glib perl python libffi-dev libgio libgio-dev pcre-dev \
			pkg-config"
			;;
	esac
}
