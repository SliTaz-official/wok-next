# SliTaz package receipt v2.

PACKAGE="linux"
VERSION="4.9.30"
KBASEVER="4.9"
CATEGORY="base-system"
SHORT_DESC="The Linux Kernel"
MAINTAINER="devel@slitaz.org"
LICENSE="GPL2"
WEB_SITE="https://www.kernel.org/"
HOST_ARCH="i486 arm x86_64"

TARBALL="$PACKAGE-$KBASEVER.tar.xz"
WGET_URL="https://www.kernel.org/pub/linux/kernel/v4.x/$TARBALL"

BUILD_DEPENDS="slitaz-toolchain perl git xz lzma patch kmod bc"
SPLIT="lguest linux-acpi linux-agp linux-aoe linux-appletalk linux-arcnet \
linux-autofs linux-bluetooth linux-bridge linux-btrfs linux-cifs linux-coda \
linux-cpufreq linux-cramfs linux-crypto linux-cryptoloop linux-dialup \
linux-dlm linux-drm linux-ecryptfs linux-efi linux-ethernet linux-exofs \
linux-firewire linux-firmware linux-gfs2 linux-hfs linux-hfsplus linux-hid \
linux-hwmon linux-ide linux-input-misc linux-input-tablet \
linux-input-touchscreen linux-ipv6 linux-irda linux-isdn linux-jfs \
linux-joystick linux-kvm linux-logfs linux-md linux-media linux-memstick \
linux-minix linux-mmc linux-module-headers linux-mwave linux-nbd linux-ncpfs \
linux-netfilter linux-nfc linux-nfs linux-nfsd linux-ocfs2 linux-orangefs \
linux-radio linux-reiserfs linux-romfs linux-sched linux-scsi linux-sound \
linux-source linux-speakup linux-squashfs linux-staging linux-toshiba \
linux-usb-gadget linux-usb-misc linux-usbdsl linux-usbip linux-uwb linux-video \
linux-wan linux-watchdog linux-wimax linux-wireless linux-without-modules \
linux-zram"
SIBLINGS="linux-api-headers linux-dev linux-man"

if [ "$KBASEVER" != "${VERSION%.0}" ]; then
	PATCH="$(dirname $WGET_URL)/patch-$VERSION.xz"
	EXTRA_SOURCE_FILES="$(basename $PATCH)"
fi

#
# The Linux receipt handle cross compilation. For x86_64 we actually use
# the uclibc-cross-compiler-x86_64 and for ARM we use a real cross env.
# Please discuss any change and keep it simple, don't play with VERSION
# string or Kernel SUBLEVEL because depmod and Pankso don't like that!
#
# The receipt also handle some cook options for faster build:
# --nonomods : Skip bzImage without modules build
#

# Handle multiarch compilation. Less bdeps when cross-compiling for ARM
case "$ARCH" in
	arm)    BUILD_DEPENDS="xz" ;;
	x86_64) BUILD_DEPENDS="xz" ;;
esac

# Handle multiarch installation. ARM use Busybox modutils, so avoid any
# deps on kmod. SLITAZ_ARCH can have also custom post_install commands
if [ -f $root/etc/slitaz/slitaz.conf ]; then
	. $root/etc/slitaz/slitaz.conf
	case "$SLITAZ_ARCH" in
		arm) DEPENDS="" ;;
	esac
fi

# Rules to configure and make the package.
compile_rules()
{
	# Update sources to the $VERSION using base sources ($KBASEVER) and patch
	if [ "$KBASEVER" != "${VERSION%.0}" ]; then
		[ -s $SRC/$(basename $PATCH) ] || wget $PATCH -O $SRC/$(basename $PATCH)
		# don't patch twice for `cook $PACKAGE --continue`
		if [ ! -f "done.patch-$VERSION" ]; then
			xzcat $SRC/$(basename $PATCH) | patch -Np1
			touch done.patch-$VERSION
		fi
	fi

	#
	if [ -f "/usr/share/boot/initrd" ]; then
		cp /usr/share/boot/initrd initrd.cpio
	fi

	# Handle cross compilation
	case "$ARCH" in
		arm)
			echo "Compiling: $ARCH Kernel"
			make mrproper
			patch -Np1 < $stuff/$ARCH/linux-arm.patch || exit 1
			cp -f $stuff/$ARCH/linux-arm.config .config
			yes '' | make ARCH=$ARCH oldconfig
			make ARCH=$ARCH CROSS_COMPILE=${HOST_SYSTEM}- bzImage &&
			make ARCH=$ARCH CROSS_COMPILE=${HOST_SYSTEM}- modules &&
			make ARCH=$ARCH CROSS_COMPILE=${HOST_SYSTEM}- \
				INSTALL_MOD_PATH=$DESTDIR modules_install &&
			mkdir -p $DESTDIR/boot &&
			cp -a arch/arm/boot/zImage \
				$DESTDIR/boot/linux-$VERSION-slitaz-$ARCH
			#$stuff/tools/gztazmod.sh $DESTDIR/lib/modules/$VERSION-slitaz
			return 0 ;;
		x86_64)
			echo "TODO: Maybe use default? But cross compile in x86_64 chroot"
			echo "so we can remove the 64 build by uclibc-cross-compiler-x86_64"
			return 0 ;;
	esac

	# Get and apply Aufs patches
	. $stuff/tools/aufs-patches

	echo "cook:linux" > $command

	# Apply misc patches
	echo "Applying patches..."
	while read patch_file; do
		if [ -f done.$patch_file ]; then
			echo "Skipping $patch_file"; continue
		fi
		echo -e "\nApply $patch_file"
		patch -p1 -i $stuff/patches/$patch_file || return 1
		touch done.$patch_file
	done < $stuff/patches/patch.order

	# Mrproper and lguest
	echo "Making kernel proper and then build lguest..."
	make mrproper
	cd tools/lguest
	make lguest || return 1
	cd $src

	#
	# Linux Arch i386 - GCC arch i486
	#
	echo "Making x86 Kernel..."

	# Build bzImage without modules first
	if [ -z "$nonomods" ]; then
		cp -f $stuff/$PACKAGE-slitaz.config .config
		sed -i 's/CONFIG_MODULES=y/# CONFIG_MODULES is not set/' .config
		# We can't keep every driver in staging???
		sed -i \
			-e 's/^CONFIG_RTL8192/#&/' \
			-e 's/^CONFIG_R8187SE/#&/' \
			-e 's/^CONFIG_RT2870/#&/' .config

		title 'Configure bzImage without modules...'
		yes '' | make ARCH=i386 oldconfig

		title 'Building bzImage without modules...'
		make ARCH=i386 -j 4 bzImage || exit 1

		mkdir -p $DESTDIR
		mv arch/x86/boot/bzImage $DESTDIR
		mv System.map System.map-without-modules
	fi

	# Build bzImage with modules
	cp -f $stuff/$PACKAGE-slitaz.config .config

	title 'Configure bzImage with modules...'
	yes '' | make ARCH=i386 oldconfig


	title 'Building bzImage with modules...'
	make ARCH=i386 -j 4 bzImage &&
	make ARCH=i386 -j 4 modules &&
	make ARCH=i386 INSTALL_MOD_PATH=$DESTDIR     modules_install &&
	make ARCH=i386 INSTALL_HDR_PATH=$DESTDIR/usr headers_install &&

	[ -s arch/x86/boot/bzImage ] || return 1
	mkdir -p $DESTDIR/boot
	mv arch/x86/boot/bzImage $DESTDIR/boot/vmlinuz-$VERSION-slitaz

	$stuff/tools/install_module_headers.sh $DESTDIR $src $VERSION-slitaz

	ln System.map System.map-modules
	ln Module.symvers Module.symvers-modules

	# for linux-zram package
	mkdir -p $install/etc/init.d
	install -o root -m 755 $stuff/compcache $install/etc/init.d/
	install -o root -m 644 $stuff/compcache.conf $install/etc/

	# for lguest package
	mkdir -p $install/usr/sbin
	cp -a $src/tools/lguest/lguest $install/usr/sbin
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	DEPENDS="linux"				# default, may be subject to change later

	case $PACKAGE in
		*-acpi)					c="ACPI modules";;
		*-agp)					c="AGP modules";;
		*-aoe)					c="AoE (ATA over Ethernet) modules";;
		*-appletalk)			c="Appletalk modules";;
		*-arcnet)				c="ARCnet modules";;
		*-autofs)				c="Automounter module";;
		*-bluetooth)			c="Bluetooth modules";;
		*-bridge)				c="Bridge modules";;
		*-btrfs)				c="Btrfs module"; DEPENDS="linux-crypto";;
		*-cifs)					c="CIFS module";;
		*-coda)					c="Coda module";;
		*-cpufreq)				c="Cpufreq modules";;
		*-cramfs)				c="CramFs module";;
		*-crypto)				c="Crypto modules";;
		*-cryptoloop)			c="Cryptoloop modules"; DEPENDS="linux-crypto";;
		*-dialup)				c="Dial-up modules";;
		*-dlm)					c="DLMFS module";;
		*-drm)					c="DRM module"; DEPENDS="linux-agp";;
		*-ecryptfs)				c="eCrypt FS module";;
		*-efi)					c="EFI modules";;
		*-ethernet)				c="Ethernet drivers";;
		*-exofs)				c="OSD based FS module"; DEPENDS="linux-crypto";;
		*-firewire)				c="Firewire modules";;
		*-gfs2)					c="GFS2 module";;
		*-hfs)					c="HFS module";;
		*-hfsplus)				c="HFSplus module";;
		*-hid)					c="HID (human interface device) modules";;
		*-hwmon)				c="Hwmon modules";;
		*-ide)					c="IDE modules";;
		*-input-misc)			c="misc. input drivers";;
		*-input-tablet)			c="tablet input drivers";;
		*-input-touchscreen)	c="touchscreen input drivers";;
		*-ipv6)					c="IPv6 modules"; DEPENDS="linux-netfilter";;
		*-irda)					c="IRDA modules";;
		*-isdn)					c="ISDN modules";;
		*-jfs)					c="JFS module";;
		*-joystick)				c="joystick modules";;
		*-kvm)					c="KVM and Virtio modules";;
		*-logfs)				c="Logfs module";;
		*-md)					c="MD modules"; DEPENDS="linux-crypto";;
		*-media)				c="media modules"; DEPENDS="linux-radio";;
		*-memstick)				c="Sony memory stick modules";;
		*-minix)				c="Minix module";;
		*-mmc)					c="MMC modules - card reader";;
		*-mwave)				c="ACP Modem driver module - for IBM Thinkpad";;
		*-nbd)					c="NBD (network block device) modules";;
		*-ncpfs)				c="NCPFS module";;
		*-netfilter)			c="Netfilter modules";;
		*-nfc)					c="NFC modules";;
		*-nfs)					c="NFS modules"; DEPENDS="linux-crypto";;
		*-nfsd)					c="NFS server module"; DEPENDS="linux-nfs";;
		*-ocfs2)				c="OCFS2 modules"; DEPENDS="linux-dlm";;
		*-orangefs)				c="OrangeFS module";;
		*-radio)				c="radio modules";;
		*-reiserfs)				c="ReiserFS module";;
		*-romfs)				c="ROMFS module";;
		*-sched)				c="Sched modules";;
		*-scsi)					c="SCSI modules";;
		*-sound)				c="sound modules"
			copy firmware/ess/ firmware/korg/ firmware/sun/ firmware/yamaha/
			;;
		*-speakup)				c="Speakup modules";;
		*-squashfs)				c="Squashfs module"; PROVIDE="squashfs-module";;
		*-staging)				c="staging kernel modules";;
		*-toshiba)				c="Toshiba module";;
		*-usb-gadget)			c="USB gadget modules";;
		*-usb-misc)				c="misc. USB drivers";;
		*-usbdsl)				c="USB DSL modem modules";;
		*-usbip)				c="Usbip module"; PROVIDE="usbip-module";;
		*-uwb)					c="UWB modules";;
		*-video)				c="video modules";;
		*-wan)					c="Wide Area Networks (WANs) modules"; DEPENDS="linux-wireless";;
		*-watchdog)				c="watchdog drivers";;
		*-wimax)				c="Wimax modules";;
		*-wireless)				c="wireless modules"; DEPENDS="linux-crypto wireless_tools";;
		*-zram)					c="compressed caching support"; PROVIDE="compcache"
			copy compcache compcache.conf
			;;
	esac

	case $PACKAGE in
		linux)
			case "$ARCH" in
				arm)
					echo "Packing: ARM Kernel"
					cp -a $install/* $fs
					rm -f $fs/lib/modules/*/build $fs/lib/modules/*/source
					return 0 ;;
				x86_64)
					echo "TODO: use default or custom x86_64 packing"
					return 0 ;;
			esac

			# Copy the Kernel
			cp -a $install/boot $fs

			# Copy base modules
			. $stuff/tools/copy_modules.sh

			# We only need module.{order,builtin} because other map files are
			# generated by depmod in post_install
			copy modules.order modules.builtin
			rm -rf $fs/usr

			# Pack all packages with a Kernel modules
			[ ! -d "$install/lib/modules/$VERSION-slitaz" ] && return 1

			# Checking for Linux Kernel modules that don't belong to any of the packages
			# $stuff/tools/check_modules.sh
			DEPENDS="kmod"
			;;
		*-firmware)
			mkdir -p $fs/lib
			cp -a $install/lib/firmware $fs/lib
			# remove linux-sound firmware files
			for i in ess korg sun yamaha; do
				rm -rf $fs/lib/firmware/$i
			done
			CAT="non-free|firmware thats compiled from Linux source code"
			PROVIDE="linux64-firmware"
			;;
		*-module-headers)
			CAT="development|header files and scripts for building modules for Linux Kernel"
			KVERSION="$VERSION-slitaz"
			DEPENDS="slitaz-toolchain"
			mkdir -p $fs/lib/modules/$KVERSION $fs/usr
			cp -a $install/usr/src $fs/usr
			;;
		*-source)
			CAT="development|source files"
			DEPENDS="linux slitaz-toolchain ncurses-dev perl xz lzma patch busybox-boot"

			local _AUFSVER=$(. $WOK/aufs/receipt; echo $VERSION)
			local AUFSDIR="aufs-${_AUFSVER}"
			kps=$fs/usr/src/kernel-patches/slitaz
			mkdir -p $kps \
				$fs/lib/modules/$VERSION-slitaz \
				$fs/usr/bin $fs/usr/sbin

			# URL
			echo $(. $WOK/linux/receipt; echo $WGET_URL) > $kps/url
			# stuff
			cp $stuff/tools/* $stuff/bootloader.sh $kps
			# Kernel patch
			xzcat $SRC/patch-$VERSION.xz > $kps/linux-$VERSION.patch
			echo "linux-$VERSION.patch" > $kps/patches
			# Aufs patches
			sed '/^aufs4.*patch$/!d' $stuff/tools/aufs-patches | \
			tee -a $kps/patches | \
			while read i; do
				cp $WOK/aufs/source/*/$i $kps
			done
			# misc. patches
			cat $stuff/patches/patch.order >> $kps/patches
			cp $stuff/patches/* $kps
			rm $kps/patch.order
			# config
			cp $WOK/linux/source/linux-$VERSION/.config $kps/config

			cp -a $stuff/linux-source/buildtaz         $kps
			cp -a $stuff/linux-source/make-tazpkg.u    $kps
			cp -a $stuff/linux-source/get-linux-source $fs/usr/bin
			cp -a $stuff/linux-source/list_modules.sh  $kps
			cp -a $stuff/linux-source/rdev             $fs/usr/sbin
			ln -s rdev $fs/usr/sbin/rootflags
			ln -s rdev $fs/usr/sbin/ramsize
			ln -s rdev $fs/usr/sbin/vidmode
			sed -i "s|=XXX|=$VERSION|g" $fs/usr/bin/get-linux-source

			# Copy Aufs4 source files
			if [ -d $WOK/$WANTED/$AUFSDIR ]; then
				mkdir $fs/usr/src/kernel-patches/slitaz/aufs4
				cp -a $WOK/$WANTED/$AUFSDIR/Documentation \
					$WOK/$WANTED/$AUFSDIR/fs $WOK/$WANTED/$AUFSDIR/include \
					$fs/usr/src/kernel-patches/slitaz/aufs4
			fi

			ln -s ../../../usr/src/linux-$VERSION $fs/lib/modules/$VERSION-slitaz/source

			chown -R root:root $fs
			;;
		*-without-modules)
			CAT="base-system|without module support"
			PROVIDE="linux"
			mkdir -p $fs/boot
			cp -a $install/bzImage $fs/boot/vmlinuz-$VERSION-slitaz-without-modules
			;;
		lguest)
			CAT="base-system|paravirtualization tool"
			DEPENDS=" "
			copy lguest
			;;
		*)
			. $stuff/tools/copy_modules.sh
			CAT="base-system|$c"
			;;
	esac

	case $PACKAGE in
		*fs|*fs2|*-coda|*-dlm|*-hfsplus|*-minix|*-nfsd)
			CONFIG_FILES="/etc/filesystems";;
		*-zram)
			CONFIG_FILES="/etc/compcache.conf";;
	esac
}


post_install_linux() {
	# Handle multiarch installation
	case "$SLITAZ_ARCH" in
		arm)
			echo "Kernel : /boot/linux-$VERSION-slitaz-$ARCH"
			echo "Modules: /lib/modules/$VERSION-slitaz"
			return 0 ;;
	esac

	# GRUB stuff.
	if [ -f "$1/boot/grub/menu.lst" ]; then
		# Current root device
		root_dev="/dev/$(lsblk | grep '/$'| grep -o '[a-z]d[a-z][0-9]*')"
		grub_part="$(( $(echo $root_dev | grep -o '[0-9]*$')-1 ))"
		# Use device.map to find grub device number
		grub_dev="$(grep $(echo $root_dev | grep -o  '^/dev/.d.' ) \
			"$1/boot/grub/device.map" | cut -f1 | sed "s/)$/.$grub_part)/g")"

		# Add and clean Kernel entries in case of upgrade for installed system.
		if ! grep -q vmlinuz-$VERSION-slitaz "$1/boot/grub/menu.lst"; then

			# Clean the old entry
			# TODO: old vmlinuz file is removed but the entry is still there.
			# So grub error:15 when selected: http://bugs.slitaz.org/?id=74

			# Add the new entry
			cat >> "$1/boot/grub/menu.lst" <<EOT

title SliTaz GNU/Linux (Kernel $VERSION-slitaz)
$grub_dev 
kernel /boot/vmlinuz-$VERSION-slitaz root=$root_dev quiet
EOT
			# Make it the default entry
			last_entry=$(( $(grep -c '^title' "$1/boot/grub/menu.lst")-1 ))
			sed -e "s/^default.*/default $last_entry/g" -i "$1/boot/grub/menu.lst"
		fi

		# Display information message.
		[ -z "$quiet" ] && cat <<EOT

----
GRUB is installed, these three lines must be in your /boot/grub/menu.lst:

title  SliTaz GNU/Linux (Kernel $VERSION-slitaz)
$grub_dev
kernel /boot/vmlinuz-$VERSION-slitaz root=$root_dev
----
EOT
	fi
	:
}

pre_remove_linux_module_headers() {
	if [ -e "$1/usr/src/linux" ]; then
		rm -rf "$1/usr/src/linux"
	fi
}

# Added soft link to make it easier to point to kernel folder
post_install_linux_module_headers() {
	KVERSION="$VERSION-slitaz"
	[ -L "$1/usr/src/linux" ] && rm -f "$1/usr/src/linux"
	ln -sf /usr/src/linux-$KVERSION "$1/usr/src/linux"
	ln -sf /usr/src/linux-$KVERSION "$1/lib/modules/$KVERSION/build"
}

post_install_linux_zram() {
	chroot "$1/" depmod -a $VERSION-slitaz &&
	RAM=$(cat /proc/meminfo | grep MemTotal | sed s/[^0-9]//g) &&
	echo "SIZE_KB="$(($RAM/2)) > "$1/etc/compcache.conf"
	[ -n "$quiet" ] || cat <<EOT

You can add compressed swap according /etc/compcache.conf configuration with:
# /etc/init.d/compcache start
Or add compcache to the RUN_DAEMONS list of /etc/rcS.conf.
EOT
}
