CPU Frequency scaling

CPU Frequency scaling allows you to change the clock speed of CPUs on the fly.
This is a nice method to save power, because the lower the CPU clock speed, the
less power the CPU consumes.

Note that this driver doesn't automatically change the CPU clock speed, you
need to either enable a dynamic cpufreq governor (see below) after boot, or use
a userspace tool.

  * 'performance' governor
    This cpufreq governor sets the frequency statically to the highest
    available CPU frequency.
  * 'powersave' governor
    This cpufreq governor sets the frequency statically to the lowest available
    CPU frequency.
  * 'userspace' governor for userspace frequency scaling
    Enable this cpufreq governor when you either want to set the CPU frequency
    manually or when a userspace program shall be able to set the CPU
    dynamically, like on LART <http://www.lartmaker.nl/>.
  * 'ondemand' cpufreq policy governor
    'ondemand' - This driver adds a dynamic cpufreq policy governor. The
    governor does a periodic polling and changes frequency based on the CPU
    utilization. The support for this governor depends on CPU capability to do
    fast frequency switching (i.e, very low latency frequency transitions).
  * 'conservative' cpufreq governor
    'conservative' - this driver is rather similar to the 'ondemand' governor
    both in its source code and its purpose, the difference is its optimisation
    for better suitability in a battery powered environment. The frequency is
    gracefully increased and decreased rather than jumping to 100% when speed
    is required.
    If you have a desktop machine then you should really be considering the
    'ondemand' governor instead, however if you are using a laptop, PDA or even
    an AMD64 based computer (due to the unacceptable step-by-step latency
    issues between the minimum and maximum frequency transitions in the CPU)
    you will probably want to use this governor.
  * 'schedutil' cpufreq policy governor
    This governor makes decisions based on the utilization data provided by the
    scheduler. It sets the CPU frequency to be proportional to the
    utilization/capacity ratio coming from the scheduler. If the utilization is
    frequency-invariant, the new frequency is also proportional to the maximum
    available frequency. If that is not the case, it is proportional to the
    current frequency of the CPU. The frequency tipping point is at
    utilization/capacity equal to 80% in both cases.
