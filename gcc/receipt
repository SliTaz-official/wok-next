# SliTaz package receipt v2.

# Note, currently first pass is broken. Sorry.
PACKAGE="gcc"
VERSION="8.2.0"
CATEGORY="development"
SHORT_DESC="The GNU Compiler Collection"
MAINTAINER="devel@slitaz.org"
LICENSE="GPL2"
WEB_SITE="http://gcc.gnu.org/"
LFS="http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html"

TARBALL="$PACKAGE-$VERSION.tar.xz"
WGET_URL="http://ftp.gnu.org/gnu/gcc/gcc-$VERSION/$TARBALL"

BUILD_DEPENDS="mpc-library-dev mpfr-dev gmp-dev elfutils-dev zlib-dev"
SPLIT="$PACKAGE-lib-base $PACKAGE-lib-math libgfortran gfortran libgomp libobjc \
libatomic $PACKAGE"
COOKOPTS="skip-log-errors"

if [ "$2" == "--first-pass" -o "$3" == "--first-pass" ]; then
	STAGE='first'
	SPLIT=''
fi

compile_rules() {
	# Handle cross compilation (native i486/ARM gcc)
	case "$ARCH" in
		i?86)
			ARCH_ARGS="--with-arch=$ARCH --with-tune=generic --enable-cld"
			pkgversion="SliTaz"
			languages="c,c++,objc,fortran"
			sed -i 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in
			;;
		x86_64)
			ARCH_ARGS=""
			pkgversion="SliTaz64"
			languages="c,c++,objc,fortran"
			sed -i.orig '/m64=/ s|lib64|lib|' gcc/config/i386/t-linux64
			;;
	esac

	# Use libiberty.a from binutils.
	sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in || return 1

	case "$STAGE" in
		first)
			echo "cook: configure GCC for: toolchain first pass"

			mkdir build
			cd    build
			../configure \
				--with-newlib \
				--without-headers \
				--disable-nls \
				--disable-shared \
				--disable-multilib \
				--disable-decimal-float \
				--disable-threads \
				--disable-libatomic \
				--disable-libgomp \
				--disable-libmpx \
				--disable-libquadmath \
				--disable-libssp \
				--disable-libvtv \
				--disable-libstdcxx \
				--enable-languages=c,c++ \
				$CONFIGURE_ARGS
				;;
		*)
			echo "cook: configure GCC for: final/full build"

			mkdir build
			cd    build
			SED=sed \
			../configure \
				--enable-languages=$languages \
				--disable-multilib \
				--disable-bootstrap \
				--disable-libmpx \
				--with-system-zlib \
				--with-pkgversion="$pkgversion" \
				$CONFIGURE_ARGS $ARCH_ARGS
				;;
	esac &&
	make &&
	make install || return 1

	mkdir -p $install/lib
	ln -sv ../usr/bin/cpp $install/lib

	ln -sv gcc $install/usr/bin/cc

	install -v -dm755 $install/usr/lib/bfd-plugins
	ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/$VERSION/liblto_plugin.so \
		$install/usr/lib/bfd-plugins/


	# Place the debugging symbols for selected libraries in separate files.
	# This debugging information is needed if running regression tests that use valgrind or gdb.
	# http://www.linuxfromscratch.org/lfs/view/stable/chapter06/strippingagain.html

	[ "$STAGE" == 'first' ] ||
	for i in libquadmath.so.0.0.0 libstdc++.so.6.0.25 libitm.so.1.0.0 \
		libatomic.so.1.2.0; do
		cd $install/usr/lib/
		objcopy --only-keep-debug $i $i.dbg
		strip   --strip-unneeded  $i
		objcopy --add-gnu-debuglink=$i.dbg $i
	done
}

genpkg_rules() {
	case $STAGE in
		first)
			# single package 'gcc' on the first stage
			copy @std @dev
			DEPENDS="glibc-base gmp mpc-library mpfr zlib binutils elfutils"
			CAT="development|first pass"
			TAGS="LFS compiler C"
			return 0
			;;
	esac

	case $PACKAGE in
		gcc-lib-base)
			copy libgcc_s.so* libstdc++.so*
			rm $fs/usr/lib*/*.py
			CAT="libs|base libraries"
			DEPENDS="glibc-base"
			;;
		gcc-lib-math)
			copy libquadmath.so*
			CAT="libs|math libraries"
			DEPENDS="glibc-base"
			;;
		libgfortran)
			copy libgfortran.so*
			CAT="libdevel|fortran runtime"
			DEPENDS="gcc-lib-base gcc-lib-math glibc-base"
			;;
		gfortran)
			copy *gfortran libgfortran.* f951 finclude/ @rm
			CAT="development|fortran extension"
			TAGS="compiler fortran"
			DEPENDS="libgfortran gcc glibc-base gmp mpc-library mpfr zlib"
			;;
		libgomp)
			copy libgomp.so*
			CAT="libs|API specification for parallel programming"
			DEPENDS="glibc-base"
			;;
		libobjc)
			copy libobjc.so*
			CAT="libdevel|API for gcc object"
			DEPENDS="gcc-lib-base glibc-base"
			;;
		libatomic)
			copy libatomic.so*
			CAT="libs|libatomic"
			DEPENDS=" "
			;;
		gcc)
			copy @std @dev @rm
			DEPENDS="gcc-lib-base libgomp libobjc libatomic \
			glibc-base gmp mpc-library mpfr zlib   binutils elfutils"
			SUGGESTED="python"
			TAGS="LFS compiler C"
			;;
	esac
}
