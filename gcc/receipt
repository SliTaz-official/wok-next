# SliTaz package receipt v2.

PACKAGE="gcc"
VERSION="6.3.0"
CATEGORY="development"
SHORT_DESC="The GNU Compiler Collection"
MAINTAINER="pankso@slitaz.org"
LICENSE="GPL2"
WEB_SITE="http://gcc.gnu.org/"
#HOST_ARCH="i486 arm"

TARBALL="$PACKAGE-$VERSION.tar.bz2"
WGET_URL="ftp://gcc.gnu.org/pub/gcc/releases/gcc-$VERSION/$TARBALL"

BUILD_DEPENDS="mpc-library-dev mpfr-dev gmp-dev elfutils-dev zlib-dev"
SPLIT="gcc-lib-base gcc-lib-math gfortran libgfortran libgomp libobjc"

# Handle cross compilation (native i486/ARM gcc)
case "$ARCH" in
	i?86)
		ARCH_ARGS="--with-tune=$ARCH"
		pkgversion="SliTaz"
		languages="c,c++,objc,fortran" ;;
	arm*)
		pkgversion="SliTaz ARM"
		languages="c,c++" ;;
esac

# Rules to configure and make the package.
compile_rules()
{
	# Package slitaz-toolchain use 'cook --options' when rebuilding
	# the full SliTaz toolchain.
	[ "$2" == "--first-pass" ] && opt=$2
	[ "$3" == "--first-pass" ] && opt=$3

	# Use libiberty.a from binutils.
	sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in || return 1

	case "$ARCH" in
		i?86) sed -i 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in ;;
	esac

	#sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

	mkdir -p ../gcc-build && cd ../gcc-build

	# This is the default GCC and we want a native build to cross compile after.
	# SliTaz target i486 host so we need a native i486 build for GCC.
	case "$opt" in
		--first-pass)
			# Used by slitaz-toolchain when rebuilding the full toolchain.
			echo "cook: configure GCC for: toolchain first pass"
			$src/configure \
				--libexecdir=/usr/lib \
				--disable-nls \
				--enable-shared \
				--enable-languages=c,c++ \
				--disable-libstdcxx-pch \
				--enable-__cxa_atexit \
				--enable-clocale=gnu \
				--enable-threads=posix \
				--disable-bootstrap \
				${CONFIGURE_ARGS}
				;;
		*)
			# Used by default to produce a full featured X86 GCC compiler.
			echo "cook: configure GCC for: final/full build"
			$src/configure \
				--libexecdir=/usr/lib \
				--enable-nls \
				--enable-languages=${languages} \
				--enable-shared \
				--with-system-zlib \
				--enable-clocale=gnu \
				--enable-objc-gc \
				--enable-__cxa_atexit \
				--enable-lto \
				--enable-threads=posix \
				--disable-bootstrap \
				--with-pkgversion="$pkgversion" \
				${CONFIGURE_ARGS} ${ARCH_ARGS}
				;;
	esac &&
	make && make install

	# ARM packages use another libs...
	case "$ARCH" in
		arm)
			libdir="$CROSS_TREE/tools/arm-slitaz-linux-gnueabi/lib"
			cp -af $libdir/libgcc_s.so*    $install/usr/lib # for gcc-lib-base
			cp -af $libdir/libstdc++.so*   $install/usr/lib
			cp -af $libdir/libquadmath.so* $install/usr/lib # for gcc-lib-math
			;;
	esac
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	case $PACKAGE in
		gcc)
			copy bin/ lib/ include/
			rm -f \
				$fs/usr/lib/libgcc_s.so* \
				$fs/usr/lib/libstdc++.so* \
				$fs/usr/lib/libquadmath.so* \
				$fs/usr/lib/libgfortran.* \
				$fs/usr/lib/libgomp.so* \
				$fs/usr/lib/libobjc.so*
				$fs/usr/bin/*gfortran \
				$fs/usr/lib/gcc/$HOST_SYSTEM/$VERSION/f951
			rm -rf \
				$fs/usr/lib/gcc/$HOST_SYSTEM/$VERSION/finclude

			# Remove build directory.
			rm -rf $WOK/$PACKAGE/source/$PACKAGE-build
			rm -rf $WOK/$PACKAGE/$PACKAGE-build
			DEPENDS="binutils libgomp libobjc gcc-lib-base mpc-library elfutils"
			TAGS="compiler C"
			;;
		gcc-lib-base)
			copy libgcc_s.so* libstdc++.so*
			rm $fs/usr/lib/*.py
			CAT="development|base libraries"
			;;
		gcc-lib-math)
			copy libquadmath.so*
			CAT="development|math libraries"
			;;
		gfortran)
			copy *gfortran libgfortran.* f951 finclude/
			rm $fs/usr/lib/libgfortran.so*
			CAT="development|fortran extension"
			TAGS="compiler fortran"
			DEPENDS="gcc libgfortran"
			;;
		libgfortran)
			copy libgfortran.so*
			CAT="libdevel|fortran runtime"
			;;
		libgomp)
			copy libgomp.so*
			CAT="development|API specification for parallel programming"
			;;
		libobjc)
			copy libobjc.so*
			CATEGORY="libdevel|API for gcc object"
			DEPENDS="gcc-lib-base"
			;;
	esac
}

# Post install commands for Tazpkg.
post_install_gcc()
{
	[ -f "$1/lib/cpp" ]    || ln -s ../usr/bin/cpp "$1/lib"
	[ -f "$1/usr/bin/cc" ] || ln -s gcc "$1/usr/bin/cc"
}
