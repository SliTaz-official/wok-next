# SliTaz package receipt v2.

PACKAGE="glibc"
VERSION="2.25"
CATEGORY="meta"
SHORT_DESC="The GNU C libraries"
MAINTAINER="pankso@slitaz.org"
LICENSE="GPL2"
WEB_SITE="http://www.gnu.org/software/libc/"

TARBALL="$PACKAGE-$VERSION.tar.gz"
WGET_URL="$GNU_MIRROR/$PACKAGE/$TARBALL"

DEPENDS="glibc-base glibc-locale glibc-dev"
BUILD_DEPENDS="linux-api-headers autoconf bash gawk gettext bison \
texinfo"
# slitaz-i18n should present in wok
SPLIT="glibc-base glibc-locale nscd glibc-dev"

# Locales include to glibc-base package by default, other locales are in: locale-** and glibc-locale
DEFAULT_LOCALE="en_US en_GB"

# Handle multiarch compilation.
case "$ARCH" in
	arm*|x86_64) VERSION="2.13";;
esac

# Handle multiarch installation.
case "$SLITAZ_ARCH" in
	arm*|x86_64) VERSION="2.13";;
esac


# Rules to compile & install the temporary toolchain.
cook_tmp_toolchain()
{
	unset CFLAGS CXXFLAGS
	echo "CFLAGS += -O2 -march=${ARCH/i386/i486} -mtune=${ARCH/i386/i486}" > configparms

	{
		# Build in a separate directory.
		mkdir glibc-build
		cd    glibc-build

		../configure \
			--host=$HOST_SYSTEM \
			--build=$($src/scripts/config.guess) \
			--disable-profile \
			--enable-add-ons \
			--enable-kernel=2.6.32 \
			--with-headers=/tools/include \
			libc_cv_forced_unwind=yes \
			libc_cv_c_cleanup=yes &&
		make -j1 &&
		make install
	} || return 1

	# Link compiler to this new glibc.
	SPECS=$(dirname $($HOST_SYSTEM-gcc -print-libgcc-file-name))/specs
	$HOST_SYSTEM-gcc -dumpspecs | sed \
		-e 's@/lib\(64\)\?/ld@/tools&@g' \
		-e "/^\*cpp:$/{n;s,$, -isystem /tools/include,}" > $SPECS
	unset SPECS
}

# Rules to configure and make the package.
compile_rules()
{
	# Glibc needs ld.so.conf in the install destdir.
	mkdir -p $install/etc
	touch    $install/etc/ld.so.conf

	# Read the INSTALL file in glibc. Also Glibc don't build with -Os flag.
	# --enale-kernel use latest SliTaz Kernel version. From Glibc INSTALL:
	# "The higher the VERSION number is, the less compatibility code is
	# added, and the faster the code gets."
	unset CFLAGS CXXFLAGS
	echo "CFLAGS += -O2 -march=${ARCH/i386/i486} -mtune=${ARCH/i386/i486}" > configparms

	{
		mkdir build
		cd    build
		$src/configure \
			--disable-profile \
			--enable-add-ons \
			--enable-obsolete-rpc \
			--enable-kernel=2.6.32 \
			--libexecdir=/usr/lib/glibc \
			--build=$HOST_SYSTEM \
			--host=$HOST_SYSTEM \
			--target=$BUILD_SYSTEM &&
		make -j1 && make install_root=$DESTDIR install
	} || return 1

	# nscd
	mkdir -p $install/etc/init.d $install/var/db
	cp $stuff/nscd $install/etc/init.d
	chmod +x $install/etc/init.d/nscd

	# nsswitch.conf
	cp $stuff/nsswitch.conf $install/etc

	# If temporary toolchain was previously used, switch to regular toolchain.
	if [ -d /tools ]; then
		mv /tools/bin/ld /tools/bin/ld-old
		mv /tools/$(gcc -dumpmachine)/bin/ld /tools/$(gcc -dumpmachine)/bin/ld-old
		mv /tools/bin/ld-new /tools/bin/ld
		ln -s /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld
		gcc -dumpspecs | sed -e 's@/tools@@g' \
			-e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
			-e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' > \
			$(dirname $(gcc --print-libgcc-file-name))/specs
	fi
}

# i18n
get_locales()
{
	local path=$1
	for i in $DEFAULT_LOCALE; do
		cp $install/$path/i18n/locales/$i $fs/usr/share/i18n/locales
	done
}

mk_dirs()
{
	mkdir -p \
		$fs/etc \
		$fs/lib \
		$fs/usr/bin \
		$fs/usr/lib/gconv \
		$fs/usr/lib/locale \
		$fs/usr/share/zoneinfo/America \
		$fs/usr/share/zoneinfo/Europe \
		$fs/usr/share/i18n/locales \
		$fs/usr/share/i18n/charmaps \
		$fs/usr/share/locale
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	case $PACKAGE in
		glibc)
			LOCALE=""
			;;
		glibc-base)
			case "$ARCH" in
				arm*)
					# Eglibc is cross compiled by cross to have a toolchain so we can
					# use these files instead of recooking it. ARM use Eglibc
					echo "Using cross compiled Eglibc..."
					install="/cross/$ARCH/sysroot"
					copy libc_nonshared.a libpthread_nonshared.a
					;;
				x86_64)
					# EXPERIMENTAL: Glibc is cross compiled by cross to have a
					# toolchain so we can use these files instead of recooking it.
					echo "Using cross compiled Glibc..."
					install="/usr/cross/$ARCH"
					copy libc_nonshared.a libpthread_nonshared.a
					;;
			esac
			copy \
				ld-*.so*            ld.so*            \
				libanl-*.so*        libanl.so*        \
				libc-*.so*          libc.so*          \
				libcrypt-*.so*      libcrypt.so*      \
				libdl-*.so*         libdl.so*         \
				libm-*.so*          libm.so*          \
				libnsl-*.so*        libnsl.so*        \
				libnss_compat-*.so* libnss_compat.so* \
				libnss_dns-*.so*    libnss_dns.so*    \
				libnss_files-*.so*  libnss_files.so*  \
				libpthread-*.so*    libpthread.so*    \
				libresolv-*.so*     libresolv.so*     \
				librt-*.so*         librt.so*         \
				libthread_db-*.so*  libthread_db.so*  \
				libutil-*.so*       libutil.so*       \
				\
				UNICODE.so gconv-modules ANSI_X3.110.so ISO8859-1.so \
				ISO8859-15.so UTF-16.so CP1252.so IBM437.so IBM850.so \
				\
				i18n iso14651_t1 iso14651_t1_common \
				translit_neutral    translit_combining translit_circle \
				translit_cjk_compat translit_compat    translit_font \
				translit_fraction   translit_narrow    translit_small \
				translit_wide \
				\
				locale localedef locale.alias UTF-8.gz UTC rpc \
				nsswitch.conf \
				$DEFAULT_LOCALE

			case "$ARCH" in
				x86_64)
					# Fix libraries search path
					sed -i "s|/usr/cross/$ARCH||g" $fs/lib/libc.so
					sed -i "s|/usr/cross/$ARCH||g" $fs/lib/libpthread.so
					;;
			esac
			CAT="base-system|minimal libraries and UTF-8 support for SliTaz"
			;;
		glibc-locale)
			copy gconv/ locale/ i18n/ iconv tzselect
			# Remove glibc-base files
			remove_already_packed

			# Remove files provided by locale-pack.
			. $WOK/slitaz-i18n/stuff/locale-pack.conf
			echo -n "Removing locale: "
			for i in $LOCALE_PACK; do
				echo -n "$i "
				rm -rf $fs/usr/share/locale/$i
			done
			status
			CAT="system-tools|locale files and utilities"
			DEPENDS="glibc-base"
			;;
		nscd)
			copy /var/db/ nscd getent nscd.conf
			CAT="base-system|name-server caching daemon"
			;;
		glibc-dev)
			copy @std @dev
			remove_already_packed
			DEPENDS="glibc-base"
			;;
	esac
}
