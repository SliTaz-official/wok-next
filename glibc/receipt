# SliTaz package receipt v2.

PACKAGE="glibc"
VERSION="2.26"
CATEGORY="meta"
SHORT_DESC="The GNU C libraries"
MAINTAINER="pankso@slitaz.org"
LICENSE="GPL2"
WEB_SITE="http://www.gnu.org/software/libc/"
LFS="http://www.linuxfromscratch.org/lfs/view/stable/chapter06/glibc.html"

TARBALL="$PACKAGE-$VERSION.tar.gz"
WGET_URL="$GNU_MIRROR/$PACKAGE/$TARBALL"

BUILD_DEPENDS="linux-api-headers autoconf bash gawk gettext bison texinfo"
# slitaz-i18n should present in wok
SPLIT="glibc-base glibc-locale nscd glibc-dev"

# Locales include to glibc-base package by default, other locales are in: locale-** and glibc-locale
DEFAULT_LOCALE="en_US en_GB"

# Handle multiarch compilation.
case "$ARCH" in
	arm*) VERSION="2.13";;
esac

# Handle multiarch installation.
case "$SLITAZ_ARCH" in
	arm*) VERSION="2.13";;
esac


# Rules to compile & install the temporary toolchain.
cook_tmp_toolchain() {
	unset CFLAGS CXXFLAGS
	case $ARCH in
		i386)   Arch='i486';;
		x86_64) Arch='nocona';;
		*)      Arch="$ARCH";;
	esac
	echo "CFLAGS += -O2 -march=$Arch -mtune=$Arch" > configparms

	# Build in a separate directory.
	mkdir build
	cd    build

	../configure \
		--host=$HOST_SYSTEM \
		--build=$($src/scripts/config.guess) \
		--disable-profile \
		--enable-add-ons \
		--enable-kernel=3.2 \
		--with-headers=/tools/include \
		libc_cv_forced_unwind=yes \
		libc_cv_c_cleanup=yes &&
	make -j1 &&
	make install || return 1

	# Link compiler to this new glibc.
	SPECS=$(dirname $($HOST_SYSTEM-gcc -print-libgcc-file-name))/specs
	$HOST_SYSTEM-gcc -dumpspecs \
	| sed \
		-e 's@/lib\(64\)\?/ld@/tools&@g' \
		-e "/^\*cpp:$/{n;s,$, -isystem /tools/include,}" > $SPECS
	unset SPECS
}

# Rules to configure and make the package.
compile_rules() {
	# Glibc needs ld.so.conf in the install destdir.
	mkdir -p $install/etc
	touch    $install/etc/ld.so.conf

	# Read the INSTALL file in glibc. Also Glibc don't build with -Os flag.
	unset CFLAGS CXXFLAGS
	case $ARCH in
		i386)   Arch='i486';;
		x86_64) Arch='nocona';;
		*)      Arch="$ARCH";;
	esac
	echo "CFLAGS += -O2 -march=$Arch -mtune=$Arch" > configparms

	# Remove a file that may be left over from a previous build attempt
	rm -f /usr/include/limits.h 2>/dev/null

	mkdir build
	cd    build
	# --enale-kernel: please respect Kernel version of the build host,
	# put the exact or lower numbers. From Glibc INSTALL:
	# > The higher the VERSION number is, the less compatibility code is
	# > added, and the faster the code gets.
	CC="gcc -isystem /usr/lib/gcc/$BUILD_SYSTEM/$(. $WOK/gcc/receipt; echo $VERSION)/include \
	-isystem /usr/include" \
	../configure \
		--disable-werror \
		--enable-kernel=3.2 \
		--enable-stack-protector=strong \
		libc_cv_slibdir=/lib \
		&&
	make -j1 &&
	touch $install/etc/ld.so.conf &&
	sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile &&
	make install_root=$install install || return 1

	# nscd
	cp ../nscd/nscd.conf $install/etc/nscd.conf
	mkdir -p $install/var/cache/nscd $install/var/db
	install -Dm755 $stuff/nscd $install/etc/init.d/nscd

	# nsswitch.conf
	cp $stuff/nsswitch.conf $install/etc

	# ld.so.conf
	install -Dm644 $stuff/ld.so.conf $install/etc/ld.so.conf

	# If temporary toolchain was previously used, switch to regular toolchain.
	if [ -d /tools ]; then
		mv /tools/bin/ld /tools/bin/ld-old
		mv /tools/$(gcc -dumpmachine)/bin/ld /tools/$(gcc -dumpmachine)/bin/ld-old
		mv /tools/bin/ld-new /tools/bin/ld
		ln -s /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld
		gcc -dumpspecs \
		| sed -e 's@/tools@@g' \
			-e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
			-e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' > \
			$(dirname $(gcc --print-libgcc-file-name))/specs
	fi

	# Create symlinks to the dynamic loader for LSB compliance.
	case $ARCH in
		i?86)
			ln -sf ld-linux.so.2 $install/lib/ld-lsb.so.3
			;;
		x86_64)
			mkdir -p $install/lib64
			ln -sf ../lib/ld-$VERSION.so $install/lib64/ld-linux-x86-64.so.2
			ln -sf ../lib/ld-$VERSION.so $install/lib64/ld-lsb-x86-64.so.3
			;;
	esac

	# Place the debugging symbols for selected libraries in separate files.
	# This debugging information is needed if running regression tests that use valgrind or gdb.
	# http://www.linuxfromscratch.org/lfs/view/stable/chapter06/strippingagain.html

	for i in ld-$VERSION.so libc-$VERSION.so libpthread-$VERSION.so libthread_db-1.0.so; do
		cd $install/lib/
		objcopy --only-keep-debug $i $i.dbg
		strip   --strip-unneeded  $i
		objcopy --add-gnu-debuglink=$i.dbg $i
	done
}

genpkg_rules() {
	case $PACKAGE in
		glibc)
			LOCALE=""
			CAT="meta|meta-package"
			DEPENDS="glibc-base glibc-locale glibc-dev"
			TAGS="LFS"
			;;
		glibc-base)
			case "$ARCH" in
				arm*)
					# Eglibc is cross compiled by cross to have a toolchain so we can
					# use these files instead of recooking it. ARM use Eglibc
					echo "Using cross compiled Eglibc..."
					install="/cross/$ARCH/sysroot"
					copy libc_nonshared.a libpthread_nonshared.a
					;;
			esac
			copy \
				ld-*.so*            ld.so*            \
				libanl-*.so*        libanl.so*        \
				libc-*.so*          libc.so*          \
				libcrypt-*.so*      libcrypt.so*      \
				libdl-*.so*         libdl.so*         \
				libm-*.so*          libm.so*          \
				libnsl-*.so*        libnsl.so*        \
				libnss_compat-*.so* libnss_compat.so* \
				libnss_dns-*.so*    libnss_dns.so*    \
				libnss_files-*.so*  libnss_files.so*  \
				libpthread-*.so*    libpthread.so*    \
				libresolv-*.so*     libresolv.so*     \
				librt-*.so*         librt.so*         \
				libthread_db-*.so*  libthread_db.so*  \
				libutil-*.so*       libutil.so*       \
				\
				UNICODE.so gconv-modules ANSI_X3.110.so ISO8859-1.so \
				ISO8859-15.so UTF-16.so CP1252.so IBM437.so IBM850.so \
				\
				i18n iso14651_t1 iso14651_t1_common \
				translit_neutral    translit_combining translit_circle \
				translit_cjk_compat translit_compat    translit_font \
				translit_fraction   translit_narrow    translit_small \
				translit_wide \
				\
				locale localedef locale.alias UTF-8.gz UTC rpc \
				nsswitch.conf \
				$DEFAULT_LOCALE

			find $fs -type f -name '*.so.dbg' -delete

			CAT="base-system|minimal libraries and UTF-8 support for SliTaz"
			DEPENDS=" "
			;;
		glibc-locale)
			copy gconv/ locale/ i18n/ iconv tzselect @rm # Remove glibc-base files

			# Remove files provided by locale-pack.
			. $WOK/slitaz-i18n/stuff/locale-pack.conf
			echo -n "Removing locale: "
			for i in $LOCALE_PACK; do
				echo -n "$i "
				rm -rf $fs/usr/share/locale/$i
			done
			status
			CAT="system-tools|misc. locale files and utilities"
			DEPENDS="glibc-base"
			;;
		nscd)
			copy /var/db/ /var/cache/nscd/ nscd getent nscd.conf
			CAT="base-system|name-server caching daemon"
			DEPENDS=" "
			;;
		glibc-dev)
			copy @std @dev @rm
			DEPENDS="glibc-base"
			;;
	esac
}
