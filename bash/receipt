# SliTaz package receipt v2.

PACKAGE="bash"
VERSION="4.4.p23"
BASEVERSION="${VERSION%.*}"
CATEGORY="shells"
SHORT_DESC="The GNU bourne shell"
MAINTAINER="devel@slitaz.org"
LICENSE="GPL3"
WEB_SITE="https://www.gnu.org/software/bash/"
LFS="http://www.linuxfromscratch.org/lfs/view/stable/chapter06/bash.html"

TARBALL="$PACKAGE-$BASEVERSION.tar.gz"
WGET_URL="$GNU_MIRROR/$PACKAGE/$TARBALL"

BASHCHECKURL="https://raw.githubusercontent.com/hannob/bashcheck/master/bashcheck"
BASHCHECK="$(basename $BASHCHECKURL)"
BASHPATCHES="$(for i in $(seq 1 ${VERSION##*.p}); do printf "bash${BASEVERSION/./}-%03d " $i; done)"
EXTRA_SOURCE_FILES="$BASHCHECK $BASHPATCHES"

BUILD_DEPENDS="ncurses-dev readline-dev texinfo gettext-dev patch"
SPLIT="$PACKAGE-dev"

COOKOPTS="force-arch" # different config.h, .inc, .pc

patch_bash() {
	for i in $BASHPATCHES; do
		[ -s "$SRC/$i" ] ||
			wget -O "$SRC/$i" \
			http://ftp.gnu.org/gnu/bash/bash-$BASEVERSION-patches/$i
		echo "Apply $i patch..."
		patch -p0 -i $SRC/$i | awk '{print "  * " $0;}'
	done
}

cook_tmp_toolchain() {
	cd $src
	patch_bash
	./configure --without-bash-malloc &&
	make &&
	make install
}

compile_rules() {
	# Patch and then build.
	patch_bash

	# Skip tests that can not run while cross-compiling.
	cat > config.cache <<EOF
ac_cv_func_mmap_fixed_mapped=yes
ac_cv_func_strcoll_works=yes
ac_cv_func_working_mktime=yes
bash_cv_func_sigsetjmp=present
bash_cv_getcwd_malloc=yes
bash_cv_job_control_missing=present
bash_cv_printf_a_format=yes
bash_cv_sys_named_pipes=present
bash_cv_ulimit_maxfds=yes
bash_cv_under_sys_siglist=yes
bash_cv_unusable_rtsigs=no
gt_cv_int_divbyzero_sigfpe=yes
EOF

	./configure \
		--cache-file=config.cache \
		--bindir=/bin \
		--enable-history \
		--enable-alias \
		--disable-nls \
		--without-bash-malloc \
		--disable-help-builtin \
		--with-installed-readline \
		$CONFIGURE_ARGS &&
	make &&
	# Bash doesn't care about DESTDIR in environnment variable.
	make DESTDIR=$install install || return 1

	# Config files
	cp -a $stuff/etc $install
	chown -R root:root $install
	chmod u+w $install/bin/bashbug # 555->755

	# Check bash against vulnerabilities
	[ -s "$SRC/$BASHCHECK" ] ||
		wget -O "$SRC/$BASHCHECK" $BASHCHECKURL
	echo
	$install/bin/bash $SRC/$BASHCHECK $install/bin/bash | \
	tee bashcheck.log
	echo
	grep Vulnerable bashcheck.log && echo "ERROR: Vulnerable"
	:
}

genpkg_rules() {
	case $PACKAGE in
		bash)
			copy @std
			DEPENDS="ncurses readline"
			TAGS="LFS shell"
			;;
		*-dev) copy @dev;;
	esac
}


post_install_bash() {
	mkdir -p "$1/etc/skel"; cp -a "$1/etc/bashrc" "$1/etc/skel/.bashrc"

	# Exit function in non-interactive mode (when user can't answer question)
	! tty -s && return

	echo -n 'Do you want to set /bin/bash to default (y/N) ? : '
	read -t 30 answer
	[ "$answer" != 'y' ] && return

	echo
	echo 'Setting /bin/bash as default shell for all users'
	sed -i 's|:/bin/[ckz]*sh$|:/bin/bash|' "$1/etc/passwd"

	echo 'Creating ~/.bashrc file for all users'
	for i in $(awk -F: '$7=="/bin/bash"{print $6}' "$1/etc/passwd"); do
		[ -e "$1$i/.bashrc" ] && continue
		cp "$1/etc/bashrc" "$1$i/.bashrc"
		chown $(stat -c%U:%G "$1$i") "$1$i/.bashrc"
	done
}


pre_remove_bash() {
	echo
	echo 'Setting /bin/sh as default shell for all users'
	sed -i 's|:/bin/bash$|:/bin/sh|' "$1/etc/passwd"
	[ -f "$1/etc/skel/.bashrc" ] && rm "$1/etc/skel/.bashrc"
}
