# SliTaz package receipt.

PACKAGE="gcc+gcj"
VERSION="4.6.3"
CATEGORY="development"
SHORT_DESC="The GNU Compiler Collection, including the gcj Compiler for Java"
MAINTAINER="devel@slitaz.org"
LICENSE="GPL2"
WEB_SITE="https://gcc.gnu.org/"
REPOLOGY="gcc"

TARBALL="gcc-$VERSION.tar.bz2"
WGET_URL="$GNU_MIRROR/gcc/gcc-$VERSION/$TARBALL"

ECJ_JAR="ecj-latest.jar"
ECJ_URL="ftp://sourceware.org/pub/java/$ECJ_JAR"
EXTRA_SOURCE_FILES="$ECJ_JAR"
PROVIDE="gcc jre jdk"
TAGS="compiler C C++ objective-C java"

BUILD_DEPENDS="glibc-dev gawk flex python perl gmp gmp-dev mpfr mpfr-dev mpc-library \
expat-dev zlib-dev fastjar gtk2-dev libart_lgpl-dev xorg-dev xorgproto \
libxtst \
elfutils elfutils-dev util-linux-uuid-dev"

compile_rules() {
	sed -i 's/@mkdir_p@/mkdir -p/' libjava/classpath/lib/copy-vmresources.sh.in
	# Set HOST_SYSTEM if not defined in tazwok.conf as it should be
	if [ -z "$HOST_SYSTEM" ]; then
		HOST_SYSTEM="$ARCH-slitaz-linux"
	fi
	GCC_TARGET=$HOST_SYSTEM

	# Get ecj.jar needed to build gcj. We have to dl it each time from the
	# sources repository to ensure that we receive the latest JAR.
	# (See http://gcc.gnu.org/install/configure.html --with-ecj-jar)
	if [ ! -f "$ECJ_JAR" ]; then
		echo "Downloading ECJ jar to: $(pwd)"
		wget -c $ECJ_URL
		# Exit if download failed to avoid errors.
		if [ ! -f "$ECJ_JAR" ]; then
			echo -e "\nECJ jar download failed, exiting. Please check ECJ_URL variable.\n"
			return 1
		fi
		cp $ECJ_JAR $SRC
	fi

	# Use libiberty.a from binutils.
	sed -i 's/install_to_$(INSTALL_DEST) //' \
		$src/libiberty/Makefile.in || return 1
	mkdir -p ../build && cd ../build

	PYTHON_LIB="$(python2 -c 'import os; print os.path.dirname(os.__file__)')"

	../${src##*/}/configure \
		--prefix=/usr \
		--libexecdir=/usr/lib \
		--infodir=/usr/share/info \
		--mandir=/usr/share/man \
		--enable-nls \
		--enable-languages=c,c++,objc,java \
		--enable-shared \
		--with-system-zlib \
		--enable-clocale=gnu \
		--enable-objc-gc \
		--enable-__cxa_atexit \
		--enable-threads=posix \
		--with-tune=$ARCH \
		--enable-java-home \
		--with-arch-directory=i386 \
		--with-jvm-root-dir=/usr/lib/jvm/java-gcj \
		--with-jvm-jar-dir=/usr/lib/jvm-exports/java-gcj \
		--with-python-dir=$PYTHON_LIB/site-packages \
		--with-x \
		--enable-java-awt=gtk \
		--enable-gtk-cairo \
		--enable-lto \
		$GCC_TARGET \
		$CONFIGURE_ARGS &&
	make bootstrap &&
	# Make install in the source tree to help creating derived pkgs
	# and keep $_pkg variable set for genpkg.
	make install
}

genpkg_rules() {
	mkdir -p  $fs/usr/share
	cp -a $install/usr/share/java $fs/usr/share
	cp -a $install/usr/bin $fs/usr
	# Copy all libs. Remove libgcc_s.so and libstdc++.so
	# they goes in gcc-lib-base-$VERSION package.
	cp -a $install/usr/lib $fs/usr
	rm $fs/usr/lib/libgcc_s.so*
	rm $fs/usr/lib/libstdc++.so*
	rm $fs/usr/lib/libgomp.so*
	#rm $fs/usr/lib/gcj-$VERSION-11/*.la
	rm $fs/usr/lib/*.la
	# Include files.
	cp -a $install/usr/include $fs/usr
	DEPENDS="glibc-base glib gcc-lib-base util-linux-uuid zlib libgomp gmp mpfr \
	python gtk2 atk cairo expat fontconfig freetype pango pixman libpng \
	libxcb xcb-util libice libsm libx11 libxau \
	libxcomposite libxcursor libxdamage libxdmcp \
	libxext libxfixes libxinerama libxrandr libxrender \
	libxtst alsa-lib elfutils"
}

post_install() {
	if [ ! -f "$1/lib/cpp" ]; then
		ln -s ../usr/bin/cpp "$1/lib"
	fi
	if [ ! -f "$1/usr/bin/cc" ]; then
		ln -s gcc "$1/usr/bin/cc"
	fi
}
